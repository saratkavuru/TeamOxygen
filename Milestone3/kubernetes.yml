# ansible-playbook --ask-vault-pass kubernetes.yml -vvv
# export KOPS_CLUSTER_NAME=devtech.k8s.local
# export KOPS_STATE_STORE=s3://kops-devtech
---
- hosts: localhost
  become: yes
  environment:
    KOPS_CLUSTER_NAME: devtech.k8s.local
    KOPS_STATE_STORE: s3://kops-devtech
  tasks:

    - name: install apt dependencies
      apt:
        pkg: "{{ item }}"
        state: installed
        update_cache: true
        cache_valid_time: 500000
      with_items:
        - git
        - python-pip
        - curl
        - snapd

    - name: install pip dependencies
      pip:
        name: 
          - awscli
    
    - name: install kubectl
      shell: |
          snap install kubectl --classic

    - name: "Verify that the repository exists"
      stat:
        path: /usr/local/bin/kops
      register: repo_verify

    - name: install kubectl
      shell: |
          curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
          chmod +x kops-linux-amd64
          sudo mv kops-linux-amd64 /usr/local/bin/kops
      args:
        chdir: /home/ubuntu/ # "{{ ansible_env.HOME }}"
      when: repo_verify.stat.exists == False  

    - name: Include vars from the vault
      include_vars:
        file: creds.yml
      no_log: true

    - name: 'Configure aws cli'
      shell: |
        aws configure set aws_access_key_id {{ AWSAccessKeyId }}
        aws configure set aws_secret_access_key {{ AWSSecretKey }}
        aws configure set default.region us-east-1
        aws configure set default.output text
        
    - name: Create an AWS S3 bucket for kops to persist its state
      shell: |
        aws s3api create-bucket --bucket kops-devtech --region us-east-1

    - name: Enable versioning for the above S3 bucket
      shell: |
        aws s3api put-bucket-versioning --bucket kops-devtech --versioning-configuration Status=Enabled

    - name: "Verify that the repository exists"
      stat:
        path: /home/ubuntu/.ssh/id_rsa.pub
      register: repo_verify
    
    - name: Gnerate key
      shell: |
        ssh-keygen -N '' -f /home/ubuntu/.ssh/id_rsa
      when: repo_verify.stat.exists == False

    - name: Check if Kubernetes cluster exists or not
      shell: |
        kops describe secrets --name=devtech.k8s.local
      register: clusterExists
      ignore_errors: yes

    - name: Create a Kubernetes cluster definition using kops      
      shell: |
        kops create cluster --name=devtech.k8s.local --node-count=3 --node-size=t2.micro --master-size=t2.micro --zones=us-east-1a --ssh-public-key=/home/ubuntu/.ssh/id_rsa.pub
      when: clusterExists.stderr_lines[1] is defined and clusterExists.stderr_lines[1].find('\"devtech.k8s.local\" not found') != -1

    - name: Create a Kubernetes cluster actually using kops      
      shell: |
        kops update cluster --name=devtech.k8s.local --yes
      when: clusterExists.stderr_lines[1] is defined and clusterExists.stderr_lines[1].find('\"devtech.k8s.local\" not found') != -1

    - name: Validate the cluster
      shell: |
        kops validate cluster
      register: result
      until: result.stdout.find("is ready") != -1
      retries: 150
      delay: 30
      # when: clusterExists.stderr_lines[1] is defined and clusterExists.stderr_lines[1]=='cluster \"devtech.k8s.local\" not found'

    # Don't forget to copy deployment file in proper folder
    - name: Deploy Checkbox on K8s cluster
      shell: |
        kubectl apply -f MongoDBDeploy.yml
      ignore_errors: yes        

    - pause:
        minutes: 1

    - name: Deploy Checkbox on K8s cluster
      shell: |
        kubectl apply -f CheckboxDeploy.yml
        kubectl apply -f RedisMasterDeploy.yml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
        kubectl apply -f dashboard-admin.yml
        kops get secrets kube --type secret -oplaintext
        kubectl expose deployment nginx-deployment --type=LoadBalancer --name=load-balancer
      ignore_errors: yes   

    # - name: Delete the cluster
    #   shell: |
    #     kops delete cluster --name=devtech.k8s.local --state=s3://kops-devtech --yes
...
